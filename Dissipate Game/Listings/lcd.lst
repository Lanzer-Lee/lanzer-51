C51 COMPILER V9.52.0.0   LCD                                                               04/07/2024 14:44:35 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN .\Objects\lcd.obj
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE source\source\lcd.c BROWSE INCDIR(.\source\head file) DEBUG OBJECTEXTEND P
                    -RINT(.\Listings\lcd.lst) TABS(2) OBJECT(.\Objects\lcd.obj)

line level    source

   1          #include "lcd.h"
   2          #include <intrins.h>
   3          
   4          //constant definition
   5          uchar code AC_TABLE[]=
   6          {
   7              0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,    
   8              0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,      
   9              0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,      
  10              0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,      
  11          };
  12          /*
  13          uchar code str0[]={0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x00};
  14          uchar code str1[]="ZDH2104";
  15          uchar code str2[]="Lanzer";
  16          uchar code str3[]="XJTU SB";
  17          */
  18          sbit SCLK=P1^3;
  19          sbit SID=P1^4;
  20          sbit CS=P1^5;
  21          
  22          
  23          void Lcd_Port_Init(void){
  24   1        //set P1[5:3] to push_pull model
  25   1          P1MDOUT |= 0x38;
  26   1        //enable crossbar
  27   1          XBR2 |= 0x40;
  28   1      }
  29          
  30          
  31          void LcdInit( void )
  32          {
  33   1          Lcd_Port_Init();
  34   1          WriteCommand(0x30);      //8BitMCU
  35   1          WriteCommand(0x06);
  36   1          WriteCommand(0x03);      //AC?0,���ı�DDRAMֵ
  37   1          WriteCommand(0x0C);      //��ʾON,�α�OFF,�α�λ����OFF
  38   1          WriteCommand(0x01);      //����,AC��0
  39   1          WriteCommand(0x06);      //д��ʱ,�α����ƶ�
  40   1      
  41   1          LcdClear();
  42   1      }
  43          
  44          void SendByte(uchar Dbyte)
  45          {
  46   1          uchar i;
  47   1          for(i=0; i<8; i++)
  48   1          {
  49   2              SCLK = 0;
  50   2              Dbyte=Dbyte<<1;      //����һλ
  51   2              SID = CY;            //�Ƴ���λ��SID
  52   2              SCLK = 1;
  53   2              SCLK = 0;
  54   2          }
C51 COMPILER V9.52.0.0   LCD                                                               04/07/2024 14:44:35 PAGE 2   

  55   1      }
  56          
  57          uchar ReceiveByte(void)
  58          {
  59   1          uchar i, temp1, temp2, temp3;
  60   1          temp1 = 0;
  61   1          temp2 = 0;
  62   1          for(i=0; i<8; i++)
  63   1          {
  64   2              temp1=temp1<<1;
  65   2              SCLK = 0;
  66   2              SCLK = 1;
  67   2              SCLK = 0;
  68   2              if(SID) temp1++;
  69   2          }
  70   1          for(i=0; i<8; i++)
  71   1          {
  72   2              temp2=temp2<<1;
  73   2              SCLK = 0;
  74   2              SCLK = 1;
  75   2              SCLK = 0;
  76   2              if(SID) temp2++;
  77   2          }
  78   1        temp3 = (0xf0&temp1)+(0x0f&temp2);
  79   1          return (temp3);
  80   1      }
  81          
  82          void CheckBusy( void )
  83          {
  84   1          do   SendByte(0xfc);      //11111,RW(1),RS(0),0
  85   1          while(0x80&ReceiveByte());      //BF(.7)=1 Busy
  86   1      }
  87          
  88          void WriteCommand(unsigned char Cbyte )
  89          {
  90   1          CS = 1;
  91   1          CheckBusy();
  92   1          SendByte(0xf8);            //11111,RW(0),RS(0),0
  93   1          SendByte(0xf0&Cbyte);      //����λ
  94   1          SendByte(0xf0&Cbyte<<4);//����λ
  95   1          CS = 0;
  96   1      }
  97          
  98          void WriteData(uchar Dbyte )
  99          {
 100   1          CS = 1;
 101   1          CheckBusy();
 102   1          SendByte(0xfa);            //11111,RW(0),RS(1),0
 103   1          SendByte(0xf0&Dbyte);      //����λ
 104   1          SendByte(0xf0&Dbyte<<4);//����λ(��ִ��<<)
 105   1          CS = 0;
 106   1      }
 107          
 108          
 109          void LineClear(uchar line)
 110          {
 111   1          uchar i;
 112   1          WriteCommand(0x30);      //8BitMCU
 113   1          WriteCommand(AC_TABLE[8*line]);      //��ʼλ��
 114   1      
 115   1          for(i=0; i<16; i++)
 116   1          {
C51 COMPILER V9.52.0.0   LCD                                                               04/07/2024 14:44:35 PAGE 3   

 117   2              WriteData(0x20);//�ո�
 118   2          }
 119   1      }
 120          
 121          
 122          void LcdClear( void )
 123          {
 124   1          uchar i;
 125   1          for(i=0; i<4; i++)
 126   1          {
 127   2              LineClear(i);
 128   2          }
 129   1      }
 130          /*
 131          void WriteChar(uchar row,uchar col,uchar ch)
 132          {
 133            WriteCommand(0x30);      //8BitMCU
 134            WriteCommand(AC_TABLE[8*row+col]);      //��ʼλ��
 135            WriteData(ch);
 136          }
 137          */
 138          void WriteStr(uchar row,uchar col,uchar *puts)
 139          {
 140   1          WriteCommand(0x30);      //8BitMCU
 141   1          WriteCommand(AC_TABLE[8*row+col]);      //��ʼλ��
 142   1          while(*puts !='\0')      //�ж��ַ����Ƿ���ʾ���
 143   1          {
 144   2              if(col==8)            //�жϻ���
 145   2              {
 146   3                  //�����ж�,���Զ��ӵ�һ�е�������
 147   3                  col=0;
 148   3                  row++;
 149   3              }
 150   2              if(row==4) row=0;      //һ����ʾ��,�ص������Ͻ�
 151   2              WriteCommand(AC_TABLE[8*row+col]);
 152   2              WriteData(*puts);      //һ������Ҫд����
 153   2              puts++;
 154   2              if(*puts == '\0')
 155   2              {
 156   3                  return;
 157   3              }
 158   2              WriteData(*puts);
 159   2              puts++;
 160   2              col++;
 161   2          }
 162   1      }
 163          
 164          
 165          //image init and show
 166          void ImageShow(uchar *imagePtr)
 167          {
 168   1        uchar i, j, k, columnPosition;
 169   1        //init
 170   1      
 171   1        for(i = 0; i < 2; i++)
 172   1        {
 173   2          columnPosition = 0x80 + 0x08 * i;
 174   2          for(j = 0; j < 32; j++)
 175   2          {
 176   3            
 177   3      /*  for(k = 0; k < 4; k++)   //�������ʾ
 178   3            {
C51 COMPILER V9.52.0.0   LCD                                                               04/07/2024 14:44:35 PAGE 4   

 179   3              //RE = 1
 180   3              WriteCommand(0x34);
 181   3              //set start position
 182   3              WriteCommand(0x80 + j);
 183   3              WriteCommand(columnPosition + k);
 184   3              
 185   3              //RE = 0
 186   3              WriteCommand(0x30);
 187   3              //write two bytes continuously
 188   3              WriteData(0x00);
 189   3              WriteData(0x00);
 190   3            }*/
 191   3            
 192   3            for(k = 0; k < 8; k++)    //ȫ����ʾ
 193   3            {
 194   4              //RE = 1
 195   4              WriteCommand(0x34);
 196   4              //set start position
 197   4              WriteCommand(0x80 + j);
 198   4              WriteCommand(columnPosition + k);
 199   4              
 200   4              //RE = 1
 201   4              WriteCommand(0x30);
 202   4              //write two bytes continuously
 203   4              WriteData(*imagePtr++);
 204   4              WriteData(*imagePtr++);
 205   4            }
 206   3          }
 207   2        }
 208   1        WriteCommand(0x32);
 209   1        WriteCommand(0x36);
 210   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    439    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
